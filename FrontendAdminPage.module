<?php namespace ProcessWire;

/**
 *
 * Frontend Admin Page
 *
 * @author Robin Sallis
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class FrontendAdminPage extends WireData implements Module {

	/**
	 * Module information
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Frontend Admin Page',
			'summary' => 'Hooks needed for the ProcessFrontendAdminPage module.',
			'version' => '0.1.0',
			'author' => 'Robin Sallis',
			'href' => 'https://github.com/Toutouwai/ProcessFrontendAdminPage',
			'icon' => 'file-code-o',
			'autoload' => true,
			'requires' => 'ProcessFrontendAdminPage, ProcessWire>=3.0.0',
		);
	}

	/**
	 * Init
	 */
	public function init() {
		$this->addHookBefore('ProcessPageView::execute', $this, 'beforePageView');
	}

	/**
	 * Before a page is viewed
	 *
	 * @param HookEvent $event
	 */
	protected function beforePageView(HookEvent $event) {

		$ppv = $event->object;
		$user = $this->wire('user');
		$session = $this->wire('session');
		$page = $ppv->_callMethod('getPage', array());

		// If this is a frontend admin page...
		if($page && $page->process == 'ProcessFrontendAdminPage') {
			// ...and the user is guest...
			if($user->isGuest()) {
				// ...then log them in as the frontend-only user
				$session->forceLogin('frontend-only');
			}

			// Pretend that this page is being loaded inside a modal
			// So that the admin header and footer are not rendered
			$this->wire('input')->get->modal = 1;
			$this->addHookAfter("Page::render", $this, "modifyHtml");
		}
		// But if not a frontend admin page and the user is the frontend-only user...
		elseif($user->hasRole('frontend-only')) {
			// ...then log them out
			$session->logout();
		}
	}

	/**
	 * Modify html markup after page render.
	 *
	 * @param HookEvent $e
	 * @return void
	 */
	public function ___modifyHtml(HookEvent $e) {
		$html = $e->return;

		// remove admin url from ProcessWire.config JS object
		$url = $this->pages->get(2)->url;
		$html = str_replace("\"admin\": \"$url\",", "\"admin\": \"null\",", $html);
		
		// return markup
		$e->return = $html;
	}

}
